{"version":3,"sources":["api/index.js","components/Loading.js","components/MovieItem.js","page/Rating.js","page/Result.js","page/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["getMovies","params","axios","get","then","res","data","getRecommended","post","Loading","react_default","a","createElement","className","spin","size","MovieItem","props","currentProps","Object","objectSpread","id","poster","detail","useRating","setRating","_useState","useState","_useState2","slicedToArray","value","setValue","src","alt","title","genres","result","i","length","g","concat","name","getGenres","tooltip","overview","rate","allowHalf","onChange","withRouter","isFetch","setIsFetch","_useState3","_useState4","movies","setMovies","useEffect","console","log","JSON","stringify","components_Loading","history","rating","handleRating","defineProperty","es_button","icon","onClick","window","location","reload","map","movie","components_MovieItem","key","poster_url","type","keys","message","error","push","state","Welcome","react_router_dom","to","App","react_router","path","exact","component","Rating","Result","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8907219.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const getMovies = (params) => axios.get('/movies', { params }).then(res => res.data)\n\nexport const getRecommended = (params) => axios.post('/recommend', params).then(res => res.data)","import React from 'react'\nimport { Spin } from 'antd'\nimport './Loading.css'\n\nfunction Loading() {\n  return (\n    <div className=\"loading\">\n      <div className=\"loading_icon\">\n        <Spin size=\"large\" />\n      </div>\n    </div>\n  )\n}\n\nexport default Loading","import React, { useState } from 'react'\nimport { Rate, Tooltip } from 'antd'\nimport './MovieItem.css'\n\nfunction getGenres(genres) {\n  let result = ''\n\n  if (!genres) return ''\n  \n  for (let i = 0; i < genres.length; i++) {\n    const g = genres[i]\n    if (i === 0) {\n      result += `${g.name}`\n    } else {\n      result += ` / ${g.name}`\n    }\n  }\n\n  return result\n}\n\nfunction MovieItem(props) {\n\n  const defaultProps = {\n    id: null,\n    poster: null,\n    detail: null,\n    useRating: null,\n    setRating: null\n  }\n\n  const currentProps = {\n    ...defaultProps,\n    ...props,\n  }\n\n  const { id, poster, detail, useRating, setRating } = currentProps\n  const [ value, setValue ] = useState(0)\n\n  function handleChange(value) {\n    setValue(value)\n    setRating(id, value)\n  }\n\n  return (\n    <div className=\"movie_item\">\n      <div className=\"item_left\">\n        <img src={ poster } alt=\"img\"/>\n      </div>\n      <div className=\"item_right\">\n        <p className=\"title\">\n          { detail.title }\n        </p>\n        <p className=\"genres\">\n          { getGenres(detail.genres) }\n        </p>\n        <Tooltip title={ detail.overview }>\n          <p className=\"overview\">{ detail.overview }</p>\n        </Tooltip>\n        {\n          useRating ?\n          (\n            <div className=\"rate\">\n              <Rate allowHalf value={value} onChange={handleChange} />\n              <span className=\"number\">{value ? `${value}分` : ''}</span>\n            </div>\n          )\n          :\n          null\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default MovieItem","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router'\nimport { Card, Row, Col, Button, message } from 'antd'\n\nimport './Rating.css'\n\nimport { getMovies } from '../api'\nimport Loading from '../components/Loading'\nimport MovieItem from '../components/MovieItem'\nimport mockData from '../mock/movies'\n\n\n// const movies = mockData\n// console.log(movies)\n\nfunction Rating(props) {\n  const [ isFetch, setIsFetch ] = useState(true)\n  const [ movies, setMovies ] = useState(null)\n\n  useEffect(() => {\n    getMovies().then(data => {\n      setIsFetch(false)\n      setMovies(data)\n      console.log(JSON.stringify(movies))\n    })\n  }, [])\n\n  if (isFetch) {\n    return (\n      <Loading />\n    )\n  }\n\n  const { history } = props\n  console.log('render')\n  // 此处的rating，不需要使用到视图上，所以不作为state\n  let rating = {}\n\n  function handleClick() {\n    console.log(rating)\n    const ratingLen = Object.keys(rating).length\n    if (ratingLen !== 15) {\n      message.error('电影未全部评分，请全部评分')\n    } else {\n      history.push('/result', { ...rating })\n    }\n  }\n\n  function handleChange() {\n    window.location.reload()\n  }\n\n  function handleRating(id, value) {\n    rating = {\n      ...rating,\n      [id]: value\n    }\n  }\n\n  return (\n    <div className=\"rating\">\n      <p className=\"tip\">\n        请先对以下15部电影进行评分，方便我们收集您的喜好\n        <Button className=\"change_btn\" icon=\"redo\" onClick={handleChange}>换一批电影</Button>\n      </p>\n      <div className=\"list\">\n        {\n          movies ?\n          movies.map(movie => (\n            <MovieItem\n              useRating={true}\n              setRating={handleRating}\n              key={movie.id}\n              poster={movie.poster_url}\n              id={movie.id}\n              detail={movie.detail}\n            />\n          )) :\n          null\n        }\n        <Button className=\"btn\" type=\"primary\" size=\"large\" onClick={handleClick}>开始推荐</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(Rating)","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router'\n\nimport './Result.css'\nimport { getRecommended } from '../api'\nimport Loading from '../components/Loading'\nimport MovieItem from '../components/MovieItem'\n\nfunction Result(props) {\n  const [ isFetch, setIsFetch ] = useState(true)\n  const [ movies, setMovies ] = useState(null)\n  const { location } = props\n  const params = location.state\n\n  // 第二个参数，传空数组，表明effect永远不需要重复执行\n  // 在这个组件里，推荐电影只需要获取一次\n  useEffect(() => {\n    getRecommended(params).then(data => {\n      setIsFetch(false)\n      setMovies(data)\n      console.log(data)\n    })\n  }, [])\n\n  console.log('render')\n\n  if (isFetch) {\n    return (\n      <Loading />\n    )\n  }\n\n  return (\n    <div className=\"result\">\n      <p className=\"tip\">为您推荐的10部电影：</p>\n      <div className=\"list\">\n        {\n          movies ?\n          movies.map(movie => (\n            <MovieItem\n              key={movie.id}\n              poster={movie.poster_url}\n              id={movie.id}\n              detail={movie.detail}\n            />\n          )) :\n          null\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(Result)","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport './Welcome.css'\n\nfunction Welcome() {\n  return (\n    <div className=\"welcome\">\n      欢迎使用电影推荐系统\n      <div className=\"link\">\n        <Link to=\"/rating\">开始使用</Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Welcome","import React, { Component } from 'react';\nimport Rating from './page/Rating';\nimport Result from './page/Result';\nimport Welcome from './page/Welcome';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\n\nimport { Button } from 'antd';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/\" exact component={Welcome} />\n          <Route path=\"/rating/\" component={Rating} />\n          <Route path=\"/result/\" component={Result} />\n        </div>\n      </Router>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}